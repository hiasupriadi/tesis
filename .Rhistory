library(xts)
library(zoo)
library(tsoutliers) #untuk outlier
library(ggplot2) #Visualisasi data
library(forecast) #untuk replace outlier, akurasi (RMSE, MAPE, dll)
library(rangerts)
library(e1071) #untuk SVR
library(dplyr)
#data inflasi
inflasi   = read.csv("https://raw.githubusercontent.com/hiasupriadi/tesis/main/inflasi.csv")
library(xts)
library(zoo)
library(tsoutliers) #untuk outlier
library(ggplot2) #Visualisasi data
library(forecast) #untuk replace outlier, akurasi (RMSE, MAPE, dll)
library(rangerts)
library(e1071) #untuk SVR
library(dplyr)
#data inflasi
inflasi   = read.csv("https://raw.githubusercontent.com/hiasupriadi/tesis/main/inflasi.csv")
bulanan   = as.yearmon(2000 + seq(0, 265)/12) #idx bln dari th 2000, pjg data=266
Inf.Indo  = xts(inflasi$INDONESIA, order.by = bulanan) #konversi data ke format ts
plot.xts(Inf.Indo, main = "Inflasi Indonesia", col='#6495ED', lwd=1.5)
#outlier pada data inflasi Indonesia
out.Indo = tso(as.ts(Inf.Indo)) #cek outlier di data ke berapa
plot(out.Indo)
#data frame outlier Inflasi Indonesia
data.frame(out.Indo$outliers, Inf.Indo[out.Indo$outliers$ind])
Inf.Indo2 = tsclean(as.ts(Inf.Indo))
Gambar1  = data.frame(Bulanan=c(time(1:266)), Inf.Indo, Inf.Indo2)
ggplot(data = Gambar1, aes(x=Bulanan, y=value, color=variabel )  ) +
ylab('') +
ggtitle('Data inflasi dengan dan tanpa outlier') +
geom_line(aes(y=Inf.Indo , col="Inflasi Indonesia"), size=1, alpha=.5) +
geom_line(aes(y=Inf.Indo2, col="Inflasi tanpa outlier"),  size=1, alpha=.5) +
theme(legend.position=c(.1,.85))
#Outlier yang telah diganti
Rep.out = data.frame(Inf.Indo[out.Indo$outliers$ind], Inf.Indo2[out.Indo$outliers$ind])
names(Rep.out)[1] = "Outlier"
names(Rep.out)[2] = "Pengganti outlier"
Rep.out
#model ARIMA
model.arima = auto.arima(Inf.Indo2, trace = T, seasonal = F,
max.d = 2,
max.D = 2,
start.p = 0,
start.q = 0,
start.P = 0,
start.Q = 0,
stationary = T)
Gambar2  = data.frame(Bulanan=c(time(1:266)), Inf.Indo2, model.arima$fitted)
ggplot(data = Gambar2, aes(x=Bulanan, y=value, color=variabel )  ) +
ylab('Inflasi') +
ggtitle('Inflasi tanpa outlier Vs Prediksi auto.arima') +
geom_line(aes(y=Inf.Indo2 , col="Inflasi tanpa outlier"), size=1, alpha=.5) +
geom_line(aes(y=model.arima$fitted, col="Prediksi auto.arima"),  size=1, alpha=.5) +
theme(legend.position=c(.1,.85))
#Parameter ARIMA yang diperoleh dengan auto.arima
model.arima$coef
mean(model.arima$residuals)
N                  = 50 #Jumlah Sampel (N) time series ----
iter               = 100
rata.Yt            = matrix(nrow=iter, ncol=N)
akurasi.autoarima2 = matrix(nrow=iter, ncol=5)
Pred.autoarima2Yt  = matrix(nrow=iter, ncol=N)
akurasi.SVR        = matrix(nrow=iter, ncol=5)
PredSVR.Yt         = matrix(nrow=iter, ncol=N)
akurasi.RF         = matrix(nrow=iter, ncol=5)
PredRF.Yt          = matrix(nrow=iter, ncol=N)
#Bangkitkan time series dari ARIMA(2,0,0)
#parameter ARIMA(2,0,0)
mu.teoritis = as.numeric(model.arima$coef[3]/(1-model.arima$coef[1]-model.arima$coef[2]))
mu          = mu.teoritis
ar1         = model.arima$coef[1]
ar2         = model.arima$coef[2]
var.res     = var(model.arima$residuals)
at          = rnorm(N+50, 0, sqrt(var.res)) #0.2107741 adl varians dr res model arima
Z           = matrix(nrow = N+50, ncol=1)
Z[1]        = 0
Z[2]        = 0
for (j in seq(3, N+50))
{
Z[j] = mu + ar1*Z[j-1] + ar2*Z[j-2] + at[j] #ARIMA(2,0,0)
}
#Outlier: Jumlah: 1 Tipe Outlier: AO, Berurutan. T tertentu ----
tipe.Out    = outliers("AO", 50+25) #50 adl data awal yg harus dihilangkan
Outlier     = outliers.effects(tipe.Out, n=length(Z))
Y           = Z+3*mean(Z)*(Outlier); #plot(Y, type='l') #tso(as.ts(Y))
plot(Y, type='l')
tso(as.ts(Y))
Yt          = as.vector(Y)
Yt1         = lag(Yt, 1)
Yt2         = lag(Yt, 2)
#dmmy.out   = as.vector(Outlier)
data        = data.frame(Yt, Yt1, Yt2)[(50+1):(N+50),]
data
N                  = 100 #Jumlah Sampel (N) time series ----
iter               = 100
#Bangkitkan time series dari ARIMA(2,0,0)
#parameter ARIMA(2,0,0)
mu.teoritis = as.numeric(model.arima$coef[3]/(1-model.arima$coef[1]-model.arima$coef[2]))
mu          = mu.teoritis
ar1         = model.arima$coef[1]
ar2         = model.arima$coef[2]
var.res     = var(model.arima$residuals)
at          = rnorm(N+50, 0, sqrt(var.res)) #0.2107741 adl varians dr res model arima
Z           = matrix(nrow = N+50, ncol=1)
Z[1]        = 0
Z[2]        = 0
for (j in seq(3, N+50))
{
Z[j] = mu + ar1*Z[j-1] + ar2*Z[j-2] + at[j] #ARIMA(2,0,0)
}
#Outlier: Jumlah: 1 Tipe Outlier: AO, Berurutan. T tertentu ----
tipe.Out    = outliers("AO", 50+50) #50 adl data awal yg harus dihilangkan
Outlier     = outliers.effects(tipe.Out, n=length(Z))
Y           = Z+3*mean(Z)*(Outlier); #plot(Y, type='l') #tso(as.ts(Y))
plot(Y, type='l')
tso(as.ts(Y))
Yt          = as.vector(Y)
Yt1         = lag(Yt, 1)
Yt2         = lag(Yt, 2)
#dmmy.out   = as.vector(Outlier)
data        = data.frame(Yt, Yt1, Yt2)[(50+1):(N+50),]
data
Y
N                  = 200 #Jumlah Sampel (N) time series ----
N                  = 200 #Jumlah Sampel (N) time series ----
#Outlier: Jumlah: 1 Tipe Outlier: AO, Berurutan. T tertentu ----
tipe.Out    = outliers("AO", 50+100) #50 adl data awal yg harus dihilangkan
Outlier     = outliers.effects(tipe.Out, n=length(Z))
tipe.Out
Outlier
Outlier
N                  = 200 #Sesuaikan jml sampel (N) ----
#Bangkitkan time series dari ARIMA(2,0,0)
#parameter ARIMA(2,0,0)
mu.teoritis = as.numeric(model.arima$coef[3]/(1-model.arima$coef[1]-model.arima$coef[2]))
mu          = mu.teoritis
ar1         = model.arima$coef[1]
ar2         = model.arima$coef[2]
var.res     = var(model.arima$residuals)
at          = rnorm(N+50, 0, sqrt(var.res)) #0.2107741 adl varians dr res model arima
Z           = matrix(nrow = N+50, ncol=1)
Z[1]        = 0
Z[2]        = 0
for (j in seq(3, N+50))
{
Z[j] = mu + ar1*Z[j-1] + ar2*Z[j-2] + at[j] #ARIMA(2,0,0)
}
#Outlier: Jumlah: 1 Tipe Outlier: AO, Berurutan. T tertentu ----
tipe.Out    = outliers("AO", 50+100) #50 adl data awal yg harus dihilangkan ->Sesuaikan outlier ke T berapa
Outlier     = outliers.effects(tipe.Out, n=length(Z))
tipe.Out
Outlier
#Outlier: Jumlah: 1 Tipe Outlier: AO, Berurutan. T tertentu ----
tipe.Out    = outliers("AO", 50+100) #50 adl ins value->Sesuaikan outlier ke T berapa
Outlier     = outliers.effects(tipe.Out, n=length(Z))
Y           = Z+3*mean(Z)*(Outlier); #plot(Y, type='l') #tso(as.ts(Y))
plot(Y, type='l')
tso(as.ts(Y))
